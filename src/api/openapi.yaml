openapi: 3.1.0
info:
  title: Certificate Manager API
  description: API for managing SSL/TLS certificates
  version: 1.0.0
servers:
  - url: /api
    description: Main API endpoint
tags:
  - name: certificates
    description: Certificate operations
  - name: ca
    description: CA certificate operations
  - name: passphrases
    description: Operations for managing certificate passphrases
  - name: renewal
    description: Renewal service operations
  - name: deployment
    description: Deployment and automation operations
  - name: settings
    description: Settings operations
  - name: filesystem
    description: Filesystem operations
  - name: activity
    description: System activity operations
  - name: logs
    description: System logs operations
  - name: auth
    description: Authentication operations
  - name: setup
    description: First-time setup operations
  - name: integrations
    description: Integrations with external systems and services
paths:
  /auth/login:
    post:
      summary: Login with username and password
      operationId: login
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: User's username
                password:
                  type: string
                  description: User's password
                  format: password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/UserProfile"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/logout:
    post:
      summary: Logout current user
      operationId: logout
      tags:
        - auth
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/user:
    get:
      summary: Get current user information
      operationId: getCurrentUser
      tags:
        - auth
      responses:
        "200":
          description: Current user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: "#/components/schemas/UserProfile"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/change-password:
    post:
      summary: Change user's password
      operationId: changePassword
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  format: password
                  description: Current password
                newPassword:
                  type: string
                  format: password
                  description: New password
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Current password is incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/users:
    get:
      summary: Get all users (admin only)
      operationId: getAllUsers
      tags:
        - auth
      responses:
        "200":
          description: List of all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not authorized (admin only)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create a new user (admin only)
      operationId: createUser
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: Username
                password:
                  type: string
                  format: password
                  description: Password
                name:
                  type: string
                  description: Display name
                role:
                  type: string
                  enum: [user, admin]
                  default: user
                  description: User role
                disabled:
                  type: boolean
                  default: false
                  description: Whether the user account is disabled
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not authorized (admin only)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/users/{username}:
    put:
      summary: Update a user (admin only)
      operationId: updateUser
      tags:
        - auth
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Display name
                password:
                  type: string
                  format: password
                  description: New password (optional)
                role:
                  type: string
                  enum: [user, admin]
                  description: User role
                disabled:
                  type: boolean
                  description: Whether the user account is disabled
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not authorized (admin only)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete a user (admin only)
      operationId: deleteUser
      tags:
        - auth
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username to delete
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "400":
          description: Invalid request (cannot delete self or last admin)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not authorized (admin only)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /setup/status:
    get:
      summary: Check if setup is needed
      operationId: checkSetupStatus
      tags:
        - setup
      responses:
        "200":
          description: Setup status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  setupNeeded:
                    type: boolean
                    description: Whether setup is needed or has already been completed
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /setup/complete:
    post:
      summary: Complete the first-time setup
      operationId: completeSetup
      tags:
        - setup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - admin
                - config
              properties:
                admin:
                  type: object
                  required:
                    - username
                    - password
                  properties:
                    username:
                      type: string
                      description: Admin username
                    password:
                      type: string
                      format: password
                      description: Admin password
                    name:
                      type: string
                      description: Admin display name
                config:
                  type: object
                  required:
                    - certPath
                  properties:
                    certPath:
                      type: string
                      description: Path to store certificates
                    port:
                      type: integer
                      description: Server port
                      default: 3000
                    enableHttps:
                      type: boolean
                      description: Enable HTTPS for the web interface
                      default: false
                    httpsPort:
                      type: integer
                      description: HTTPS port
                      default: 9443
                    httpsCert:
                      type: string
                      description: Path to HTTPS certificate
                    httpsKey:
                      type: string
                      description: Path to HTTPS private key
      responses:
        "200":
          description: Setup completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "400":
          description: Invalid request or setup already completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /activity:
    get:
      summary: Get recent activities
      operationId: getActivities
      tags:
        - activity
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
          description: Maximum number of activities to return
        - name: type
          in: query
          schema:
            type: string
            enum: [certificate, user, system]
          description: Filter activities by type
        - name: search
          in: query
          schema:
            type: string
          description: Search term to filter activities
      responses:
        "200":
          description: List of activities
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  activities:
                    type: array
                    items:
                      $ref: "#/components/schemas/Activity"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Add a new activity
      operationId: addActivity
      tags:
        - activity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivityCreate"
      responses:
        "201":
          description: Activity added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Clear all activities
      operationId: clearActivities
      tags:
        - activity
      responses:
        "200":
          description: Activities cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /ca:
    get:
      summary: Get all CA certificates
      operationId: getAllCACertificates
      tags:
        - ca
      responses:
        "200":
          description: A list of CA certificates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CertificateResponse"

  /certificates:
    get:
      summary: Get all certificates
      operationId: getAllCertificates
      tags:
        - certificates
      responses:
        "200":
          description: A list of certificates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CertificateResponse"
    post:
      summary: Create a new certificate
      operationId: createCertificate
      tags:
        - certificates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCertificateRequest"
      responses:
        "201":
          description: Certificate created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}:
    get:
      summary: Get certificate by fingerprint
      operationId: getCertificate
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Certificate details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateResponse"
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    patch:
      summary: Update certificate metadata
      operationId: updateCertificateMetadata
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Certificate name
                description:
                  type: string
                  description: Certificate description
                group:
                  type: string
                  description: Certificate group
                tags:
                  type: array
                  items:
                    type: string
                  description: Certificate tags
                metadata:
                  type: object
                  description: Custom metadata
      responses:
        "200":
          description: Certificate metadata updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update certificate configuration
      operationId: updateCertificate
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCertificateRequest"
      responses:
        "200":
          description: Certificate updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateResponse"
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete a certificate
      operationId: deleteCertificate
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Certificate deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/backups:
    get:
      summary: Get all backups for a certificate
      operationId: getCertificateBackups
      tags:
        - certificates
        - backups
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of backups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Backup"
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a backup of a certificate
      operationId: createCertificateBackup
      tags:
        - certificates
        - backups
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Backup created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  backup:
                    $ref: "#/components/schemas/Backup"
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/backups/{backupId}:
    delete:
      summary: Delete a backup
      operationId: deleteCertificateBackup
      tags:
        - certificates
        - backups
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
        - name: backupId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Backup deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Certificate or backup not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/backups/{backupId}/download:
    get:
      summary: Download a backup
      operationId: downloadCertificateBackup
      tags:
        - certificates
        - backups
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
        - name: backupId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Backup file
          content:
            application/zip:
              schema:
                type: string
                format: binary
        "404":
          description: Certificate or backup not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/backups/{backupId}/restore:
    post:
      summary: Restore a backup
      operationId: restoreCertificateBackup
      tags:
        - certificates
        - backups
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
        - name: backupId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Backup restored
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Certificate or backup not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/check-renewal-passphrases:
    get:
      summary: Check if passphrases are needed for renewal
      operationId: checkRenewalPassphrases
      tags:
        - certificates
        - passphrases
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Passphrase requirements for renewal
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  certificate:
                    type: object
                    properties:
                      fingerprint:
                        type: string
                      name:
                        type: string
                      needsPassphrase:
                        type: boolean
                      hasPassphrase:
                        type: boolean
                  signingCA:
                    type: object
                    nullable: true
                    properties:
                      fingerprint:
                        type: string
                      name:
                        type: string
                      needsPassphrase:
                        type: boolean
                      hasPassphrase:
                        type: boolean
                  passphraseNeeded:
                    type: boolean

  /certificates/{fingerprint}/convert:
    post:
      summary: Convert certificate to different format
      operationId: convertCertificate
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - format
              properties:
                format:
                  type: string
                  enum: [pem, der, p12, pfx, p7b, crt, cer]
                  description: Target format
                password:
                  type: string
                  description: Password for PKCS#12/PFX formats
      responses:
        "200":
          description: Conversion successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  filePath:
                    type: string
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/deploy:
    post:
      summary: Execute deployment actions for a certificate
      operationId: deployCertificate
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deployment result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  actionsExecuted:
                    type: integer
                  failures:
                    type: array
                    items:
                      type: object
                  details:
                    type: array
                    items:
                      type: object
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/deploy-actions/{actionIndex}/toggle:
    post:
      summary: Toggle enabled state of a deployment action
      operationId: toggleDeploymentAction
      tags:
        - certificates
        - deployment
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
        - name: actionIndex
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Action toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  enabled:
                    type: boolean

  /certificates/{fingerprint}/deploy-actions:
    get:
      summary: Get all deployment actions for a certificate
      operationId: getDeploymentActions
      tags:
        - certificates
        - deployment
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of deployment actions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeploymentAction"
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Add a new deployment action
      operationId: addDeploymentAction
      tags:
        - certificates
        - deployment
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeploymentAction"
      responses:
        "201":
          description: Deployment action added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeploymentAction"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/deploy-actions/execute:
    post:
      summary: Execute all deployment actions for a certificate
      operationId: executeDeploymentActions
      tags:
        - certificates
        - deployment
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Result of executing all deployment actions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  actionsExecuted:
                    type: integer
                  failures:
                    type: array
                    items:
                      type: object
                  details:
                    type: array
                    items:
                      type: object
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/deploy-actions/{actionIndex}:
    delete:
      summary: Remove a deployment action
      operationId: removeDeploymentAction
      tags:
        - certificates
        - deployment
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
        - name: actionIndex
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Deployment action removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  remainingActions:
                    type: integer
        "404":
          description: Certificate or action not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update a deployment action
      tags: [certificates, deployment]
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
        - name: actionIndex
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CopyAction"
                - $ref: "#/components/schemas/SshCopyAction"
                - $ref: "#/components/schemas/CommandAction"
                - $ref: "#/components/schemas/DockerRestartAction"
                - $ref: "#/components/schemas/WebhookAction"
                - $ref: "#/components/schemas/NginxProxyManagerAction"
                - $ref: "#/components/schemas/SmbCopyAction"
                - $ref: "#/components/schemas/FtpCopyAction"
                - $ref: "#/components/schemas/ApiCallAction"
                - $ref: "#/components/schemas/EmailAction"
      responses:
        "200":
          description: Deployment action updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  action:
                    oneOf:
                      - $ref: "#/components/schemas/CopyAction"
                      - $ref: "#/components/schemas/SshCopyAction"
                      - $ref: "#/components/schemas/CommandAction"
                      - $ref: "#/components/schemas/DockerRestartAction"
                      - $ref: "#/components/schemas/NginxProxyManagerAction"
                      - $ref: "#/components/schemas/SmbCopyAction"
                      - $ref: "#/components/schemas/FtpCopyAction"
                      - $ref: "#/components/schemas/ApiCallAction"
                      - $ref: "#/components/schemas/WebhookAction"
                      - $ref: "#/components/schemas/EmailAction"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Certificate or action not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/deploy-actions/{actionIndex}/test:
    post:
      summary: Test a deployment action
      operationId: testDeploymentAction
      tags:
        - certificates
        - deployment
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
        - name: actionIndex
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Result of the test execution
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  result:
                    type: object
                  logs:
                    type: array
                    items:
                      type: string
        "404":
          description: Certificate or action not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/deploy-actions/reorder:
    post:
      summary: Reorder deployment actions
      operationId: reorderDeploymentActions
      tags:
        - certificates
        - deployment
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order:
                  type: array
                  items:
                    type: integer
                  description: New order of action indices
              required:
                - order
      responses:
        "200":
          description: Deployment actions reordered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  actions:
                    type: array
                    items:
                      $ref: "#/components/schemas/DeploymentAction"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/download/{fileType}:
    get:
      summary: Download a certificate file
      description: Download a specific certificate file (cert, key, chain, fullchain, etc)
      operationId: downloadCertificateFile
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
          description: Certificate fingerprint
        - name: fileType
          in: path
          required: true
          schema:
            type: string
            enum:
              [
                crt,
                key,
                chain,
                fullchain,
                pfx,
                p12,
                pem,
                p7b,
                csr,
                cer,
                der,
                ext,
              ]
          description: Type of certificate file to download
      responses:
        "200":
          description: Certificate file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Certificate or file not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/download:
    get:
      summary: Download all certificate files as a ZIP archive
      description: Download all files related to a certificate in a ZIP archive
      operationId: downloadCertificateZip
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
          description: Certificate fingerprint
      responses:
        "200":
          description: ZIP archive containing certificate files
          content:
            application/zip:
              schema:
                type: string
                format: binary
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/files:
    get:
      summary: Get all available files for a certificate
      description: Returns a list of files that exist for the certificate with their paths and metadata
      operationId: getCertificateFiles
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
          description: Certificate fingerprint
      responses:
        "200":
          description: List of certificate files
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      description: File type (cert, key, etc.)
                    path:
                      type: string
                      description: Full file path
                    size:
                      type: integer
                      description: File size in bytes
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/history:
    get:
      summary: Get certificate previous versions
      operationId: getCertificateHistory
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Certificate history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  fingerprint:
                    type: string
                  certificate:
                    type: string
                  previousVersions:
                    type: object

  /certificates/{fingerprint}/history/{previousFingerprint}/files/{fileType}:
    get:
      summary: Download a file from a previous certificate version
      operationId: downloadPreviousVersionFile
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
        - name: previousFingerprint
          in: path
          required: true
          schema:
            type: string
        - name: fileType
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: File from previous version
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  /certificates/{fingerprint}/history/{previousFingerprint}/download:
    get:
      summary: Download all files from a previous certificate version as ZIP
      operationId: downloadPreviousVersionZip
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
        - name: previousFingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ZIP archive containing all files from previous version
          content:
            application/zip:
              schema:
                type: string
                format: binary

  /certificates/{fingerprint}/passphrase:
    get:
      summary: Check if certificate has a stored passphrase
      operationId: hasPassphrase
      tags:
        - passphrases
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Has passphrase status
          content:
            application/json:
              schema:
                type: object
                properties:
                  hasPassphrase:
                    type: boolean

    post:
      summary: Store a passphrase for a certificate
      operationId: storePassphrase
      tags:
        - passphrases
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                passphrase:
                  type: string
                  description: Passphrase to store
              required:
                - passphrase
      responses:
        "201":
          description: Passphrase stored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

    delete:
      summary: Delete a stored passphrase
      operationId: deletePassphrase
      tags:
        - passphrases
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Passphrase deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

  /certificates/{fingerprint}/renew:
    post:
      summary: Renew a certificate
      operationId: renewCertificate
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RenewCertificateRequest"
      responses:
        "200":
          description: Certificate renewed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateResponse"
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/san:
    get:
      summary: Get SAN (Subject Alternative Name) entries for a certificate
      operationId: getSanEntries
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: SAN entries for the certificate
          content:
            application/json:
              schema:
                type: object
                properties:
                  domains:
                    type: array
                    items:
                      type: string
                  idleDomains:
                    type: array
                    items:
                      type: string
                  ips:
                    type: array
                    items:
                      type: string
                  idleIps:
                    type: array
                    items:
                      type: string
                  needsRenewal:
                    type: boolean
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Add a domain or IP to certificate SAN
      operationId: addSanEntry
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - value
              properties:
                value:
                  type: string
                  description: Domain or IP address to add
                type:
                  type: string
                  enum: [domain, ip]
                  default: domain
                  description: Type of entry
                idle:
                  type: boolean
                  default: true
                  description: Whether the entry should be idle until renewal
      responses:
        "201":
          description: SAN entry added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  domains:
                    type: array
                    items:
                      type: string
                  idleDomains:
                    type: array
                    items:
                      type: string
                  ips:
                    type: array
                    items:
                      type: string
                  idleIps:
                    type: array
                    items:
                      type: string
                  needsRenewal:
                    type: boolean
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/san/{type}/{value}:
    delete:
      summary: Remove a domain or IP from certificate SAN
      operationId: removeSanEntry
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: [domain, ip]
          description: Type of entry to remove
        - name: value
          in: path
          required: true
          schema:
            type: string
          description: Domain or IP to remove
        - name: idle
          in: query
          required: false
          schema:
            type: boolean
          description: Whether to remove from idle list
      responses:
        "200":
          description: SAN entry removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  domains:
                    type: array
                    items:
                      type: string
                  idleDomains:
                    type: array
                    items:
                      type: string
                  ips:
                    type: array
                    items:
                      type: string
                  idleIps:
                    type: array
                    items:
                      type: string
                  needsRenewal:
                    type: boolean
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Certificate or SAN entry not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/san/apply:
    post:
      summary: Apply idle domains/IPs and renew certificate
      operationId: applyIdleSanEntries
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Idle domains and IPs applied successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  success:
                    type: boolean
                  result:
                    type: object
        "400":
          description: No idle domains or IPs to apply
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /certificates/{fingerprint}/verify-key-match:
    get:
      summary: Verify if certificate and private key match
      operationId: verifyKeyMatch
      tags:
        - certificates
      parameters:
        - name: fingerprint
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Verification result
          content:
            application/json:
              schema:
                type: object
                properties:
                  matches:
                    type: boolean

  /certificates/groups:
    get:
      summary: Get all certificate groups
      operationId: getCertificateGroups
      tags:
        - certificates
      responses:
        "200":
          description: List of certificate groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    type: array
                    items:
                      type: string
                    description: List of certificate group names

  /docker/containers:
    get:
      summary: Get all Docker containers
      operationId: getDockerContainers
      tags:
        - docker
      responses:
        "200":
          description: List of Docker containers
          content:
            application/json:
              schema:
                type: object
                properties:
                  dockerAvailable:
                    type: boolean
                    description: Whether Docker is available on the server
                  containers:
                    type: array
                    items:
                      $ref: "#/components/schemas/DockerContainer"
        "503":
          description: Docker service not available
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  dockerAvailable:
                    type: boolean

  /docker/containers/{id}/restart:
    post:
      summary: Restart Docker container
      operationId: restartDockerContainer
      tags:
        - docker
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Container ID or name
      responses:
        "200":
          description: Container restart result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "503":
          description: Docker service not available
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /filesystem/check:
    get:
      summary: Check if a path exists
      operationId: checkPath
      tags:
        - filesystem
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
          description: Path to check
      responses:
        "200":
          description: Path existence check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  exists:
                    type: boolean
                  path:
                    type: string
                  isDirectory:
                    type: boolean
                  isFile:
                    type: boolean
                  size:
                    type: integer
                    nullable: true
                  modified:
                    type: string
                    format: date-time
                    nullable: true
                  created:
                    type: string
                    format: date-time
                    nullable: true
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /filesystem/directory:
    get:
      summary: List directory contents
      operationId: listDirectory
      tags:
        - filesystem
      parameters:
        - in: query
          name: path
          schema:
            type: string
          description: Directory path to list
        - in: query
          name: showHidden
          schema:
            type: boolean
            default: false
          description: Whether to show hidden files
        - in: query
          name: showSystemFiles
          schema:
            type: boolean
            default: false
          description: Whether to show system files
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [name, size, modified, created]
            default: name
          description: Field to sort by
        - in: query
          name: sortDirection
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort direction
        - in: query
          name: filter
          schema:
            type: string
          description: Filter files by name
      responses:
        "200":
          description: Directory contents
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  path:
                    type: string
                  parent:
                    type: string
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        path:
                          type: string
                        isDirectory:
                          type: boolean
                        isFile:
                          type: boolean
                        size:
                          type: integer
                          nullable: true
                        modified:
                          type: string
                          format: date-time
                        created:
                          type: string
                          format: date-time
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Directory not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a directory
      operationId: createDirectory
      tags:
        - filesystem
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - path
              properties:
                path:
                  type: string
                  description: Directory path to create
      responses:
        "200":
          description: Directory creation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  path:
                    type: string
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /filesystem/locations:
    get:
      summary: Get filesystem locations
      operationId: getFilesystemLocations
      tags:
        - filesystem
      responses:
        "200":
          description: Locations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  special:
                    type: object
                    additionalProperties:
                      type: string
                    description: Special locations like home, desktop, etc
                  root:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        path:
                          type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /filesystem/roots:
    get:
      summary: Get filesystem roots and special locations
      operationId: getFilesystemRoots
      tags:
        - filesystem
      responses:
        "200":
          description: Filesystem roots and special locations
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  roots:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        path:
                          type: string
                  specialLocations:
                    type: object
                    properties:
                      home:
                        type: string
                      temp:
                        type: string
                      desktop:
                        type: string
                      documents:
                        type: string

  /integrations/npm/check-connection:
    post:
      summary: Check connection to Nginx Proxy Manager API
      operationId: checkNpmConnection
      tags:
        - integrations
        - deployment
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                apiUrl:
                  type: string
                  description: Nginx Proxy Manager API URL (optional, uses global settings if not provided)
      responses:
        "200":
          description: Connection check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "400":
          description: Invalid request or missing settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /integrations/npm/request-token:
    post:
      summary: Request authentication token from Nginx Proxy Manager
      operationId: requestNpmToken
      tags:
        - integrations
        - deployment
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                apiUrl:
                  type: string
                  description: Nginx Proxy Manager API URL (optional, uses global settings if not provided)
                email:
                  type: string
                  format: email
                  description: Email for NPM authentication (optional, uses global settings if not provided)
                password:
                  type: string
                  format: password
                  description: Password for NPM authentication (optional, uses global settings if not provided)
      responses:
        "200":
          description: Token request result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  token:
                    type: string
                    description: Authentication token (if successful)
        "400":
          description: Invalid request or missing settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /integrations/npm/validate-token:
    get:
      summary: Validate Nginx Proxy Manager authentication token
      operationId: validateNpmToken
      tags:
        - integrations
        - deployment
      responses:
        "200":
          description: Token validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  valid:
                    type: boolean
                    description: Whether the token is valid
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
        "400":
          description: Invalid request or missing settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /integrations/npm/certificates:
    get:
      summary: Get certificates from Nginx Proxy Manager
      operationId: getNpmCertificates
      tags:
        - integrations
        - deployment
      responses:
        "200":
          description: Certificates from NPM
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  certificates:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        domain:
                          type: string
                        nice_name:
                          type: string
                        expires_on:
                          type: string
                          format: date-time
        "400":
          description: Invalid request or missing settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /integrations/npm/status:
    get:
      summary: Get NPM connection status
      operationId: getNpmStatus
      tags:
        - integrations
        - deployment
      responses:
        "200":
          description: NPM connection status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  configured:
                    type: boolean
                    description: Whether NPM is configured
                  hasToken:
                    type: boolean
                    description: Whether we have a token stored
                  connected:
                    type: boolean
                    description: Whether we can connect to NPM
                  tokenValid:
                    type: boolean
                    description: Whether the token is valid
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /integrations/npm/certificates/{id}:
    post:
      summary: Update a certificate in Nginx Proxy Manager
      operationId: updateNpmCertificate
      tags:
        - integrations
        - deployment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: NPM certificate ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - certData
              properties:
                certData:
                  type: object
                  required:
                    - certificate
                    - key
                  properties:
                    certificate:
                      type: string
                      description: Certificate content (PEM format)
                    key:
                      type: string
                      description: Private key content (PEM format)
                    chain:
                      type: string
                      description: Certificate chain content (PEM format)
                apiUrl:
                  type: string
                  description: Nginx Proxy Manager API URL (optional, uses global settings if not provided)
                token:
                  type: string
                  description: Authentication token (optional, uses global settings if not provided)
      responses:
        "200":
          description: Certificate update result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  certificate:
                    type: object
                    description: Updated certificate details
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /logs:
    get:
      summary: Get logs from the default log file
      operationId: getLogs
      tags:
        - logs
      parameters:
        - in: query
          name: level
          schema:
            type: string
            enum: [error, warn, info, debug, fine, finest, all]
            default: all
          description: Filter logs by level
        - in: query
          name: file
          schema:
            type: string
          description: Filter logs by source filename
        - in: query
          name: search
          schema:
            type: string
          description: Search text in log messages
        - in: query
          name: limit
          schema:
            type: integer
            default: 1000
          description: Maximum number of log entries to return
      responses:
        "200":
          description: Log entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogEntry"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /logs/files:
    get:
      summary: Get list of available log files
      operationId: getLogFiles
      tags:
        - logs
      responses:
        "200":
          description: List of log files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogFile"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /logs/file/{filename}:
    get:
      summary: Get content of a specific log file
      operationId: getLogFileContent
      tags:
        - logs
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
          description: Log filename
        - in: query
          name: limit
          schema:
            type: integer
            default: 1000
          description: Maximum number of log entries to return
        - in: query
          name: level
          schema:
            type: string
            enum: [error, warn, info, debug, fine, finest, all]
          description: Filter logs by level
        - in: query
          name: file
          schema:
            type: string
          description: Filter logs by source filename
        - in: query
          name: search
          schema:
            type: string
          description: Search text in log messages
      responses:
        "200":
          description: Log entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogEntry"
        "404":
          description: Log file not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Clear a log file
      operationId: clearLogFile
      tags:
        - logs
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
          description: Log filename
      responses:
        "200":
          description: Log file cleared
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "404":
          description: Log file not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /renewal/check:
    post:
      summary: Check for certificates that need renewal
      operationId: checkRenewals
      tags:
        - renewal
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                forceAll:
                  type: boolean
                  description: Force check all certificates regardless of auto-renew setting
      responses:
        "200":
          description: Renewal check results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  checkTime:
                    type: string
                    format: date-time
                  total:
                    type: integer
                  checked:
                    type: integer
                  renewalNeeded:
                    type: integer
                  renewedCount:
                    type: integer
                  renewalErrors:
                    type: integer
                  renewed:
                    type: array
                    items:
                      type: object
                  failed:
                    type: array
                    items:
                      type: object

  /renewal/status:
    get:
      summary: Get renewal service status
      operationId: getRenewalStatus
      tags:
        - renewal
      responses:
        "200":
          description: Renewal service status
          content:
            application/json:
              schema:
                type: object
                properties:
                  active:
                    type: boolean
                  cronActive:
                    type: boolean
                  watcherActive:
                    type: boolean
                  lastCheckTime:
                    type: string
                    format: date-time
                    nullable: true
                  nextScheduledCheck:
                    type: string
                    format: date-time
                    nullable: true
                  renewalSchedule:
                    type: string
                  renewalCheckInterval:
                    type: integer
                  enableWatcher:
                    type: boolean
                  recentRenewals:
                    type: array
                    items:
                      type: object
                  runningTasks:
                    type: object

  /renewal/schedule:
    post:
      summary: Update renewal schedule
      operationId: updateRenewalSchedule
      tags:
        - renewal
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schedule:
                  type: string
                  description: Cron schedule pattern (e.g., '0 0 * * *')
      responses:
        "200":
          description: Schedule update result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  nextScheduledCheck:
                    type: string
                    format: date-time

  /renewal/watcher/restart:
    post:
      summary: Restart the certificate file watcher
      operationId: restartFileWatcher
      tags:
        - renewal
      responses:
        "200":
          description: File watcher restart result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /security/rotate-encryption-key:
    post:
      summary: Rotate passphrase encryption key
      operationId: rotateEncryptionKey
      tags:
        - passphrases
      responses:
        "200":
          description: Encryption key rotated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

  /settings:
    get:
      summary: Get all settings
      operationId: getSettings
      tags:
        - settings
      responses:
        "200":
          description: Current settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    patch:
      summary: Update settings
      operationId: updateSettings
      tags:
        - settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingsUpdate"
      responses:
        "200":
          description: Settings updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  settings:
                    $ref: "#/components/schemas/Settings"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /settings/certificates:
    get:
      summary: Get certificate-specific settings
      operationId: getCertificateSettings
      tags:
        - settings
      responses:
        "200":
          description: Certificate settings
          content:
            application/json:
              schema:
                type: object
                properties:
                  validity:
                    type: integer
                    description: Default certificate validity period in days
                  renewBefore:
                    type: integer
                    description: Default days before expiry to trigger renewal
                  keySize:
                    type: integer
                    description: Default key size for certificates (2048, 4096)
                  preferredChallenge:
                    type: string
                    description: Default challenge type for ACME validation
                  autoRenew:
                    type: boolean
                    description: Default auto-renewal setting
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    patch:
      summary: Update certificate-specific settings
      operationId: updateCertificateSettings
      tags:
        - settings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                validity:
                  type: integer
                  description: Default certificate validity period in days
                renewBefore:
                  type: integer
                  description: Default days before expiry to trigger renewal
                keySize:
                  type: integer
                  description: Default key size for certificates (2048, 4096)
                preferredChallenge:
                  type: string
                  description: Default challenge type for ACME validation
                autoRenew:
                  type: boolean
                  description: Default auto-renewal setting
      responses:
        "200":
          description: Certificate settings updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  settings:
                    type: object
                    properties:
                      validity:
                        type: integer
                      renewBefore:
                        type: integer
                      keySize:
                        type: integer
                      preferredChallenge:
                        type: string
                      autoRenew:
                        type: boolean
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /settings/logging:
    # Existing GET and POST operations remain unchanged
    get:
      summary: Get logging settings
      operationId: getLoggingSettings
      tags:
        - settings
        - logs
      responses:
        "200":
          description: Current logging settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoggingSettings"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    # Change the POST method to PUT to match our implementation
    put:
      summary: Update all logging settings
      operationId: updateAllLoggingSettings
      tags:
        - settings
        - logs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                logLevel:
                  type: string
                  enum: [error, warn, info, debug, fine, finest]
                  description: Default log level
                fileLogLevels:
                  type: object
                  additionalProperties:
                    type: string
                    enum: [error, warn, info, debug, fine, finest]
                  description: File-specific log levels
      responses:
        "200":
          description: Logging settings updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  logLevel:
                    type: string
                  fileLogLevels:
                    type: object
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /settings/logging/default:
    post:
      summary: Update default log level
      operationId: updateDefaultLogLevel
      tags:
        - settings
        - logs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - level
              properties:
                level:
                  type: string
                  enum: [error, warn, info, debug, fine, finest]
                  description: Default log level
      responses:
        "200":
          description: Default log level updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  logLevel:
                    type: string
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /settings/logging/file:
    post:
      summary: Update file-specific log level
      operationId: updateFileLogLevel
      tags:
        - settings
        - logs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - filename
                - level
              properties:
                filename:
                  type: string
                  description: Filename to set log level for
                level:
                  type: string
                  enum: [error, warn, info, debug, fine, finest]
                  description: Log level for the file
      responses:
        "200":
          description: File log level updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  filename:
                    type: string
                  level:
                    type: string
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /settings/logging/file/{filename}:
    delete:
      summary: Remove file-specific log level
      operationId: removeFileLogLevel
      tags:
        - settings
        - logs
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
          description: Filename to remove log level for
      responses:
        "200":
          description: File log level removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  filename:
                    type: string
        "404":
          description: File log level not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /settings/deployment:
    get:
      summary: Get deployment settings
      operationId: getDeploymentSettings
      tags:
        - settings
        - deployment
      responses:
        "200":
          description: Current deployment settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeploymentSettings"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update all deployment settings
      operationId: updateDeploymentSettings
      tags:
        - settings
        - deployment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deployment:
                  $ref: "#/components/schemas/DeploymentSettings"
      responses:
        "200":
          description: Settings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  deployment:
                    $ref: "#/components/schemas/DeploymentSettings"
        "400":
          description: Invalid settings format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /settings/deployment/email:
    put:
      summary: Update email deployment settings
      operationId: updateEmailSettings
      tags:
        - settings
        - deployment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                smtp:
                  $ref: "#/components/schemas/SmtpSettings"
      responses:
        "200":
          description: Email settings updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  email:
                    type: object
                    properties:
                      smtp:
                        $ref: "#/components/schemas/SmtpSettings"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /settings/deployment/email/test:
    post:
      summary: Test email settings
      operationId: testEmailSettings
      tags:
        - settings
        - deployment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - smtp
                - recipient
              properties:
                smtp:
                  $ref: "#/components/schemas/SmtpSettings"
                recipient:
                  type: string
                  description: Email address to send test message to
      responses:
        "200":
          description: Test email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  messageId:
                    type: string
                    description: Email message ID
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Failed to send test email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /settings/deployment/nginx-proxy-manager:
    put:
      summary: Update Nginx Proxy Manager settings
      operationId: updateNginxProxyManagerSettings
      tags:
        - settings
        - deployment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NginxProxyManagerSettings"
      responses:
        "200":
          description: Settings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  nginxProxyManager:
                    $ref: "#/components/schemas/NginxProxyManagerSettings"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /settings/deployment/nginx-proxy-manager/test:
    post:
      summary: Test Nginx Proxy Manager connection
      operationId: testNginxProxyManagerConnection
      tags:
        - settings
        - deployment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NginxProxyManagerSettings"
      responses:
        "200":
          description: Connection successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  certificates:
                    type: integer
                    description: Number of certificates found in NPM
        "500":
          description: Connection failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /settings/deployment/docker:
    put:
      summary: Update Docker deployment default settings
      operationId: updateDockerSettings
      tags:
        - settings
        - deployment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DockerDefaultSettings"
      responses:
        "200":
          description: Settings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  dockerDefaults:
                    $ref: "#/components/schemas/DockerDefaultSettings"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /settings/renewal:
    get:
      summary: Get auto-renewal settings
      operationId: getRenewalSettings
      tags:
        - settings
      responses:
        "200":
          description: Current renewal settings
          content:
            application/json:
              schema:
                type: object
                properties:
                  enableAutoRenewalJob:
                    type: boolean
                  renewalSchedule:
                    type: string
                  renewDaysBeforeExpiry:
                    type: integer
                  enableFileWatch:
                    type: boolean
                  includeIdleDomainsOnRenewal:
                    type: boolean
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    
    put:
      summary: Update auto-renewal settings
      operationId: updateRenewalSettings
      tags:
        - settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enableAutoRenewalJob:
                  type: boolean
                renewalSchedule:
                  type: string
                renewDaysBeforeExpiry:
                  type: integer
                enableFileWatch:
                  type: boolean
                includeIdleDomainsOnRenewal:
                  type: boolean
      responses:
        "200":
          description: Settings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  settings:
                    type: object
                    properties:
                      enableAutoRenewalJob:
                        type: boolean
                      renewalSchedule:
                        type: string
                      renewDaysBeforeExpiry:
                        type: integer
                      enableFileWatch:
                        type: boolean
                      includeIdleDomainsOnRenewal:
                        type: boolean
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /public/logLevel:
    get:
      tags:
        - Public
      summary: Get current log level
      description: Returns the current log level without requiring authentication
      operationId: getLogLevel
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  logLevel:
                    type: string
                    enum: [error, warn, info, debug]
                    example: info
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-controller: public
      x-operation: getLogLevel

  /public/ping:
    get:
      tags:
        - Public
      summary: API ping
      description: Simple endpoint to check if API is operational
      operationId: ping
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-05-04T12:22:00Z"
                  message:
                    type: string
                    example: "API is operational"
      x-controller: public
      x-operation: ping

  /public/status:
    get:
      tags:
        - Public
      summary: Check application initialization status
      description: Returns the current initialization status of the application
      operationId: getSystemStatus
      responses:
        "200":
          description: System status information
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready:
                    type: boolean
                    description: Whether the system is fully initialized and ready
                    example: true
                  version:
                    type: string
                    description: Application version
                    example: "1.2.3"
                  initializationProgress:
                    type: integer
                    description: Progress percentage of initialization (0-100)
                    example: 75
                  setupNeeded:
                    type: boolean
                    description: Whether initial setup is required
                    example: false
                  authRequired:
                    type: boolean
                    description: Whether authentication is required
                    example: true
                  error:
                    type: string
                    description: Error message if initialization failed
                    example: null
      x-controller: public
      x-operation: getSystemStatus

components:
  schemas:
    UserProfile:
      type: object
      properties:
        username:
          type: string
          description: User's username
        name:
          type: string
          description: User's display name
        role:
          type: string
          enum: [user, admin]
          description: User's role

    User:
      allOf:
        - $ref: "#/components/schemas/UserProfile"
        - type: object
          properties:
            created:
              type: string
              format: date-time
              description: When the user was created
            lastLogin:
              type: string
              format: date-time
              description: Last login timestamp
            lastLoginIp:
              type: string
              description: IP address of last login
            loginCount:
              type: integer
              description: Number of times the user has logged in
            disabled:
              type: boolean
              description: Whether the user account is disabled

    Backup:
      type: object
      properties:
        id:
          type: string
          description: Backup ID
        date:
          type: string
          format: date-time
          description: Date when backup was created
        size:
          type: integer
          description: Size of backup in bytes
        filename:
          type: string
          description: Filename of backup

    CertificateResponse:
      type: object
      properties:
        name:
          type: string
        fingerprint:
          type: string
        subject:
          type: string
        issuer:
          type: string
        validFrom:
          type: string
          format: date-time
        validTo:
          type: string
          format: date-time
        certType:
          type: string
          enum: [standard, rootCA, intermediateCA, acme]
        domains:
          type: array
          items:
            type: string
        ips:
          type: array
          items:
            type: string
        paths:
          type: object
          properties:
            crtPath:
              type: string
            keyPath:
              type: string
            pemPath:
              type: string
            p12Path:
              type: string
        autoRenew:
          type: boolean
        renewDaysBeforeExpiry:
          type: integer
        signWithCA:
          type: boolean
        caFingerprint:
          type: string
        hasPassphrase:
          type: boolean
        isExpired:
          type: boolean
        isExpiringSoon:
          type: boolean
        daysUntilExpiry:
          type: integer
        keyType:
          type: string
          description: Type of key (RSA, EC, etc.)
          example: "RSA"
        keySize:
          type: integer
          description: Size of key in bits
          example: 2048
        sigAlg:
          type: string
          description: Signature algorithm
          example: "sha256WithRSAEncryption"
        caName:
          type: string
          description: Name of the CA certificate that signed this certificate
          example: "My Root CA"

    CreateCertificateRequest:
      type: object
      required:
        - name
        - domains
      properties:
        name:
          type: string
          description: Certificate name
        domains:
          type: array
          items:
            type: string
          description: Domain names for the certificate
        ips:
          type: array
          items:
            type: string
          description: IP addresses for the certificate
        certType:
          type: string
          enum: [standard, rootCA, intermediateCA]
          default: standard
        signWithCA:
          type: boolean
          default: false
        caFingerprint:
          type: string
          description: Fingerprint of the CA to sign with
        autoRenew:
          type: boolean
          default: false
        renewDaysBeforeExpiry:
          type: integer
          default: 30
        passphrase:
          type: string
          description: Optional passphrase for the private key
        storePassphrase:
          type: boolean
          default: false
          description: Whether to store the passphrase securely

    Error:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer

    RenewCertificateRequest:
      type: object
      properties:
        passphrase:
          type: string
          description: Passphrase for the certificate's private key if encrypted

    UpdateCertificateRequest:
      type: object
      properties:
        autoRenew:
          type: boolean
          description: Whether to automatically renew the certificate
        renewDaysBeforeExpiry:
          type: integer
          description: Days before expiry to trigger renewal
        signWithCA:
          type: boolean
          description: Whether the certificate should be signed with a CA
        caFingerprint:
          type: string
          description: Fingerprint of the CA to sign with
        deployActions:
          type: array
          items:
            $ref: "#/components/schemas/DeploymentAction"
          description: Actions to execute after certificate renewal

    CommandAction:
      allOf:
        - $ref: "#/components/schemas/DeploymentAction"
        - type: object
          required:
            - command
          properties:
            command:
              type: string
              description: Command to execute
            cwd:
              type: string
              description: Working directory for command
            env:
              type: object
              description: Environment variables
            verbose:
              type: boolean
              description: Whether to log command output

    CopyAction:
      allOf:
        - $ref: "#/components/schemas/DeploymentAction"
        - type: object
          required:
            - source
            - destination
          properties:
            source:
              type: string
              description: Source file or certificate component (cert, key, chain, fullchain, p12, pem)
            destination:
              type: string
              description: Destination path on local system
            permissions:
              type: integer
              description: File permissions to set (octal, Unix/Linux only)

    DockerContainer:
      type: object
      properties:
        id:
          type: string
          description: Full container ID
        shortId:
          type: string
          description: Short container ID (first 12 characters)
        name:
          type: string
          description: Container name
        image:
          type: string
          description: Container image
        status:
          type: string
          description: Container status/state
        created:
          type: number
          description: Creation timestamp

    DockerRestartAction:
      allOf:
        - $ref: "#/components/schemas/DeploymentAction"
        - type: object
          properties:
            containerId:
              type: string
              description: Docker container ID
            containerName:
              type: string
              description: Docker container name

    NginxProxyManagerAction:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [nginx-proxy-manager]
        npmPath:
          type: string
          description: Path to Nginx Proxy Manager installation
        dockerContainer:
          type: string
          description: Nginx Proxy Manager docker container name

    SshCopyAction:
      allOf:
        - $ref: "#/components/schemas/DeploymentAction"
        - type: object
          required:
            - host
            - source
            - destination
          properties:
            host:
              type: string
              description: SSH host
            port:
              type: integer
              default: 22
              description: SSH port
            username:
              type: string
              description: SSH username
            password:
              type: string
              description: SSH password
            privateKey:
              type: string
              description: Path to SSH private key file
            passphrase:
              type: string
              description: Passphrase for the private key if encrypted
            source:
              type: string
              description: Source file or certificate component (cert, key, chain, fullchain, p12, pem)
            destination:
              type: string
              description: Destination path on remote server
            permissions:
              type: integer
              description: File permissions to set (octal)
            command:
              type: string
              description: Command to execute after copy
            verbose:
              type: boolean
              description: Whether to log detailed information

    SmbCopyAction:
      type: object
      required:
        - type
        - share
        - source
        - destination
      properties:
        type:
          type: string
          enum: [smb-copy]
        share:
          type: string
          description: SMB share path (e.g. \\\\server\\share)
        domain:
          type: string
          description: Windows domain for authentication
        username:
          type: string
          description: SMB username
        password:
          type: string
          description: SMB password
        source:
          type: string
          description: Source file or certificate component
        destination:
          type: string
          description: Destination path on SMB share
        verbose:
          type: boolean
          description: Whether to log detailed information

    FtpCopyAction:
      type: object
      required:
        - type
        - host
        - source
        - destination
      properties:
        type:
          type: string
          enum: [ftp-copy]
        host:
          type: string
          description: FTP host
        port:
          type: integer
          default: 21
          description: FTP port
        username:
          type: string
          description: FTP username
        password:
          type: string
          description: FTP password
        secure:
          type: boolean
          description: Use secure FTP (FTPS)
        source:
          type: string
          description: Source file or certificate component
        destination:
          type: string
          description: Destination path on FTP server
        permissions:
          type: integer
          description: File permissions to set (octal)
        verbose:
          type: boolean
          description: Whether to log detailed information

    ApiCallAction:
      type: object
      required:
        - type
        - url
      properties:
        type:
          type: string
          enum: [api-call]
        url:
          type: string
          description: API endpoint URL
        method:
          type: string
          enum: [GET, POST, PUT, PATCH, DELETE]
          default: POST
          description: HTTP method
        headers:
          type: object
          description: HTTP headers
        auth:
          type: object
          properties:
            bearer:
              type: string
              description: Bearer token
            username:
              type: string
              description: Basic auth username
            password:
              type: string
              description: Basic auth password
            apiKey:
              type: string
              description: API key
            apiKeyHeader:
              type: string
              description: Header name for API key
        jsonPayload:
          type: object
          description: JSON payload for the request
        formData:
          type: object
          description: Form data for the request (x-www-form-urlencoded)
        sendFiles:
          type: boolean
          description: Whether to send certificate files as multipart/form-data
        files:
          type: object
          description: Map of form field names to certificate file types (cert, key, etc.)
        data:
          type: object
          description: Additional data to include with the request
        verbose:
          type: boolean
          description: Whether to log detailed information

    WebhookAction:
      allOf:
        - $ref: "#/components/schemas/DeploymentAction"
        - type: object
          required:
            - url
          properties:
            url:
              type: string
              description: Webhook endpoint URL
            method:
              type: string
              enum: [GET, POST, PUT, PATCH]
              default: POST
              description: HTTP method
            event:
              type: string
              default: certificate.deployed
              description: Event name to include in webhook payload
            headers:
              type: object
              description: HTTP headers
            auth:
              type: object
              properties:
                bearer:
                  type: string
                  description: Bearer token
                type:
                  type: string
                  enum: [basic]
                  description: Authentication type
                username:
                  type: string
                  description: Basic auth username
                password:
                  type: string
                  description: Basic auth password
            includeFiles:
              type: array
              items:
                type: string
                enum: [cert, key, chain, fullchain]
              description: Certificate files to include in webhook payload
            includeCustomData:
              type: boolean
              description: Whether to include custom data in the webhook payload
            customData:
              type: object
              description: Custom data to include in webhook payload

    EmailAction:
      type: object
      required:
        - type
        - to
      properties:
        type:
          type: string
          enum: [email]
        to:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Email recipient(s)
        cc:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: CC recipient(s)
        bcc:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: BCC recipient(s)
        from:
          type: string
          description: Sender email address
        subject:
          type: string
          description: Email subject
        smtp:
          type: object
          properties:
            host:
              type: string
              description: SMTP server host
            port:
              type: integer
              description: SMTP server port
            secure:
              type: boolean
              description: Whether to use SSL/TLS
            user:
              type: string
              description: SMTP username
            password:
              type: string
              description: SMTP password
            rejectUnauthorized:
              type: boolean
              description: Whether to reject unauthorized SSL/TLS connections
        transportConfig:
          type: object
          description: Custom nodemailer transport configuration
        template:
          type: object
          properties:
            html:
              type: string
              description: HTML template for email body
            text:
              type: string
              description: Text template for email body
        attachCertificates:
          type: array
          items:
            type: string
            enum: [cert, key, chain, fullchain, p12, pem]
          description: Certificate files to attach to the email

    Settings:
      type: object
      properties:
        certPath:
          type: string
        enableHttps:
          type: boolean
        httpsPort:
          type: integer
        httpsCertPath:
          type: string
          nullable: true
        httpsKeyPath:
          type: string
          nullable: true
        openSSLPath:
          type: string
        caValidityPeriod:
          type: object
          properties:
            rootCA:
              type: integer
            intermediateCA:
              type: integer
            standard:
              type: integer
        autoRenewByDefault:
          type: boolean
        renewDaysBeforeExpiry:
          type: integer
        logLevel:
          type: string
          enum: [error, warn, info, debug]
        jsonOutput:
          type: boolean
        enableCertificateBackups:
          type: boolean
        keepBackupsForever:
          type: boolean
        backupRetention:
          type: integer
        signStandardCertsWithCA:
          type: boolean
        enableAutoRenewalJob:
          type: boolean
        renewalSchedule:
          type: string
        enableFileWatch:
          type: boolean

    SettingsUpdate:
      type: object
      properties:
        certPath:
          type: string
        enableHttps:
          type: boolean
        httpsPort:
          type: integer
        httpsCertPath:
          type: string
        httpsKeyPath:
          type: string
        openSSLPath:
          type: string
        caValidityPeriod:
          type: object
          properties:
            rootCA:
              type: integer
            intermediateCA:
              type: integer
            standard:
              type: integer
        autoRenewByDefault:
          type: boolean
        renewDaysBeforeExpiry:
          type: integer
        includeIdleDomainsOnRenewal:
          type: boolean
        logLevel:
          type: string
          enum: [error, warn, info, debug]
        jsonOutput:
          type: boolean
        enableCertificateBackups:
          type: boolean
        keepBackupsForever:
          type: boolean
        backupRetention:
          type: integer
        signStandardCertsWithCA:
          type: boolean
        enableAutoRenewalJob:
          type: boolean
        renewalSchedule:
          type: string
        enableFileWatch:
          type: boolean

    Activity:
      type: object
      properties:
        id:
          type: string
          description: Unique activity identifier
        timestamp:
          type: string
          format: date-time
          description: When the activity occurred
        action:
          type: string
          description: Description of the activity
        type:
          type: string
          description: Type of activity (create, renew, delete, etc.)
        target:
          type: string
          description: Target of the action (certificate name, etc.)
        metadata:
          type: object
          description: Additional contextual information

    ActivityCreate:
      type: object
      required:
        - action
        - type
        - target
      properties:
        action:
          type: string
          description: Description of the activity
        type:
          type: string
          description: Type of activity (create, renew, delete, etc.)
        target:
          type: string
          description: Target of the action (certificate name, etc.)
        metadata:
          type: object
          description: Additional contextual information

    LogFile:
      type: object
      properties:
        name:
          type: string
          description: Log filename
        path:
          type: string
          description: Full path to log file
        size:
          type: integer
          description: File size in bytes
        modified:
          type: string
          format: date-time
          description: Last modified time

    LogEntry:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Log entry timestamp
        level:
          type: string
          enum: [error, warn, info, debug, fine, finest]
          description: Log level
        message:
          type: string
          description: Log message
        filename:
          type: string
          description: Source file that generated the log
        meta:
          type: object
          description: Additional metadata for the log entry

    LoggingSettings:
      type: object
      properties:
        defaultLevel:
          type: string
          enum: [error, warn, info, debug, fine, finest]
          description: Default log level
        fileLogLevels:
          type: object
          additionalProperties:
            type: string
            enum: [error, warn, info, debug, fine, finest]
          description: File-specific log levels

    LoggingSettingsUpdate:
      type: object
      properties:
        defaultLevel:
          type: string
          enum: [error, warn, info, debug, fine, finest]
          description: Default log level
        fileLogLevels:
          type: object
          additionalProperties:
            type: string
            enum: [error, warn, info, debug, fine, finest]
          description: File-specific log levels

    FileSystemItem:
      type: object
      properties:
        name:
          type: string
          description: File or directory name
        path:
          type: string
          description: Full path
        isDirectory:
          type: boolean
          description: Whether this is a directory
        isFile:
          type: boolean
          description: Whether this is a file
        size:
          type: integer
          nullable: true
          description: File size in bytes (null for directories)
        modified:
          type: string
          format: date-time
          description: Last modified time
        created:
          type: string
          format: date-time
          description: Creation time

    DeploymentAction:
      type: object
      discriminator:
        propertyName: type
        mapping:
          copy: "#/components/schemas/CopyAction"
          command: "#/components/schemas/CommandAction"
          "docker-restart": "#/components/schemas/DockerRestartAction"
          "nginx-proxy-manager": "#/components/schemas/NginxProxyManagerAction"
          "ssh-copy": "#/components/schemas/SshCopyAction"
          "smb-copy": "#/components/schemas/SmbCopyAction"
          "ftp-copy": "#/components/schemas/FtpCopyAction"
          "api-call": "#/components/schemas/ApiCallAction"
          webhook: "#/components/schemas/WebhookAction"
          email: "#/components/schemas/EmailAction"
      properties:
        name:
          type: string
          description: Display name for the action
        type:
          type: string
          description: Type of deployment action
        enabled:
          type: boolean
          default: true
          description: Whether the action is enabled
      required:
        - type
        - name

    DeploymentActionToggleResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        enabled:
          type: boolean

    DeploymentSettings:
      type: object
      properties:
        email:
          type: object
          properties:
            smtp:
              $ref: "#/components/schemas/SmtpSettings"
        nginxProxyManager:
          $ref: "#/components/schemas/NginxProxyManagerSettings"
        dockerDefaults:
          $ref: "#/components/schemas/DockerDefaultSettings"
      description: Global deployment settings

    SmtpSettings:
      type: object
      properties:
        host:
          type: string
          description: SMTP server hostname
        port:
          type: integer
          default: 587
          description: SMTP server port
        secure:
          type: boolean
          default: false
          description: Whether to use SSL/TLS
        user:
          type: string
          description: SMTP username for authentication
        password:
          type: string
          description: SMTP password for authentication
          format: password
        from:
          type: string
          description: Default sender email address
      description: SMTP server settings for email actions

    NginxProxyManagerSettings:
      type: object
      properties:
        host:
          type: string
          description: Nginx Proxy Manager host
        port:
          type: integer
          default: 81
          description: Nginx Proxy Manager port
        useHttps:
          type: boolean
          default: false
          description: Whether to use HTTPS for connecting to NPM
        rejectUnauthorized:
          type: boolean
          default: true
          description: Whether to verify SSL certificates (set to false for self-signed certs)
        username:
          type: string
          description: Nginx Proxy Manager username
        password:
          type: string
          format: password
          description: Nginx Proxy Manager password
        accessToken:
          type: string
          format: password
          description: NPM API access token
        refreshToken:
          type: string
          format: password
          description: NPM API refresh token
        tokenExpiry:
          type: string
          format: date-time
          nullable: true
          description: When the NPM token expires
      description: Nginx Proxy Manager connection settings

    DockerDefaultSettings:
      type: object
      properties:
        socketPath:
          type: string
          default: /var/run/docker.sock
          description: Docker socket path for Unix socket connections
        host:
          type: string
          description: Docker host for TCP connections
        port:
          type: integer
          default: 2375
          description: Docker port for TCP connections
        useTLS:
          type: boolean
          default: false
          description: Whether to use TLS for Docker connection
      description: Default settings for Docker deployment actions

    CertificateVersion:
      type: object
      properties:
        fingerprint:
          type: string
          description: Fingerprint of the previous version
        version:
          type: integer
          description: Version number
        subject:
          type: string
          description: Certificate subject
        issuer:
          type: string
          description: Certificate issuer
        validFrom:
          type: string
          format: date-time
          description: Validity start date
        validTo:
          type: string
          format: date-time
          description: Validity end date
        domains:
          type: array
          items:
            type: string
          description: Domain names included in the certificate
        ips:
          type: array
          items:
            type: string
          description: IP addresses included in the certificate
        keyType:
          type: string
          description: Key type (RSA, EC, etc.)
        keySize:
          type: integer
          description: Key size in bits
        sigAlg:
          type: string
          description: Signature algorithm
        archivedAt:
          type: string
          format: date-time
          description: When this version was archived
        archivedFiles:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: File type (crt, key, etc.)
              path:
                type: string
                description: Path to the archived file
              relativePath:
                type: string
                description: Relative path from certificate directory
